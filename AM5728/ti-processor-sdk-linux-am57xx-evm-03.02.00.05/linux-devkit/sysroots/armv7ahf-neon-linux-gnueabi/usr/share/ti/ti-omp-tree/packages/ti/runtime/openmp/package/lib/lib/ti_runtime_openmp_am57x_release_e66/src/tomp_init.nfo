TMS320C6x C/C++ Optimizer               v8.1.0
Build Number 1PLQV-2LI-UARAR-TAR-C08D
Making tomp_semAcquire a function synonym of AcquireSpinLock
Making tomp_semRelease a function synonym of ReleaseSpinLock

		======File-level Analysis Summary======


static unsigned char AcquireSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void ReleaseSpinLock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void __TI_omp_terminate() is called from 0 sites in this file.
    It appears to be inlineable (size = 62 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_exitGlobalNRT() (1 times)
	tomp_eventFree() (3 times)
	tomp_exitProcessing() (1 times)
	tomp_sendExitEvents() (1 times)

static void acquire_dsp_queue_lock() is called from 1 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semAcquire() (1 times)

static void *queuePop() is called from 1 sites in this file.
    It appears to be inlineable (size = 41 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_lock_release() (1 times)
	tomp_logError() (1 times)
	queue_lock_acquire() (1 times)

static int queuePushDesc() is called from 2 sites in this file.
    It appears to be inlineable (size = 32 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_logError() (1 times)
	queue_lock_release() (1 times)
	queue_lock_acquire() (1 times)

static void queue_lock_acquire() is called from 2 sites in this file.
    It appears to be inlineable (size = 2 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	acquire_dsp_queue_lock() (1 times)

static void queue_lock_release() is called from 2 sites in this file.
    It appears to be inlineable (size = 2 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	release_dsp_queue_lock() (1 times)

static void release_dsp_queue_lock() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_semRelease() (1 times)
	tomp_mfence() (1 times)

static void tomp_clear_TeamState() is called from 1 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static void *tomp_eventAlloc() is called from 2 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePop() (1 times)

static void *tomp_eventAllocChecked() is called from 3 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_logError() (1 times)
	tomp_eventAlloc() (1 times)

static void tomp_eventFree() is called from 4 sites in this file.
    It appears to be inlineable (size = 7 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePushDesc() (1 times)

static void tomp_eventPush() is called from 1 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queuePushDesc() (1 times)

static void *tomp_event_pointer() is called from 3 sites in this file.
    It appears to be inlineable (size = 3 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void tomp_exitLocalX() is called from 0 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	exit() (1 times)
	tomp_exitProcessing() (1 times)

extern void tomp_exitProcessing() is called from 2 sites in this file.
    It appears to be inlineable (size = 16 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_waitAtCoreBarrier() (1 times)
	tomp_eventFree() (1 times)

extern void tomp_initIcv() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void tomp_initIcvNoParse() is called from 0 sites in this file.
    It appears to be inlineable (size = 19 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_initIcv() (1 times)

extern int tomp_initLocal() is called from 0 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_clear_TeamState() (1 times)
	tomp_alloc_TeamState() (1 times)

extern int tomp_initParallel() is called from 0 sites in this file.
    It appears to be inlineable (size = 117 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_allocInitTLSBlock() (2 times)
	tomp_event_pointer() (3 times)
	tomp_eventAllocChecked() (3 times)

static void tomp_logError() is called from 3 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	exit() (1 times)
	tomp_sendExitEvents() (1 times)
	printf() (1 times)

static void tomp_mfence() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static unsigned char tomp_semAcquire() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	AcquireSpinLock() (1 times)

static void tomp_semRelease() is called from 1 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ReleaseSpinLock() (1 times)

extern void tomp_sendExitEvents() is called from 2 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	tomp_eventPush() (1 times)
	tomp_eventAlloc() (1 times)


These functions may be recursive:
	__TI_omp_terminate()
	tomp_exitLocalX()
	tomp_exitProcessing()
	tomp_initLocal()
	tomp_initParallel()
	tomp_sendExitEvents()
	tomp_eventPush()
	queuePushDesc()
	tomp_eventAlloc()
	queuePop()
	tomp_logError()

Function tomp_eventAllocChecked() will be specialized on these parameters:
	[1] size == 52u;

Results of interprocedural value propagation:

   static void *tomp_eventAllocChecked() has these parameter attributes:
      unsigned size :     size == 52u;
      int line :          line%2 == 1;  line <= 179;  line >= 157;

Results of interprocedural value propagation:

   static void tomp_logError() has these parameter attributes:
      unsigned e :        e%4u == 2u;  e <= 6u;  e >= 2u;
      int line :          line%2 == 1;  line <= 179;  line >= 105;
Inlineable function will be suppressed: tomp_semAcquire()
Inlineable function will be suppressed: tomp_eventPush()
Inlineable function will be suppressed: tomp_event_pointer()
Inlineable function will be suppressed: tomp_semRelease()
Inlineable function will be suppressed: queue_lock_release()
Inlineable function will be suppressed: queue_lock_acquire()
Inlineable function will be suppressed: tomp_eventAllocChecked()
Inlineable function will be suppressed: tomp_eventAlloc()
Inlineable function will be suppressed: ReleaseSpinLock()
Inlineable function will be suppressed: tomp_eventFree()
Inlineable function will be suppressed: tomp_clear_TeamState()
Inlineable function will be suppressed: tomp_mfence()
Inlineable function will be suppressed: release_dsp_queue_lock()
Inlineable function will be suppressed: AcquireSpinLock()
Inlineable function will be suppressed: acquire_dsp_queue_lock()
Inlineable function will be suppressed: queuePushDesc()

These external functions are called but not defined here:
	printf()
	exit()
	tomp_allocInitTLSBlock()
	tomp_alloc_TeamState()
	tomp_waitAtCoreBarrier()
	tomp_exitGlobalNRT()


		======= End file-level Analysis =======


==============================================================================

static void tomp_logError() is called from 3 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_sendExitEvents() (1 times)

There are -1 memory accesses with 0 dependences.


==============================================================================

static void *queuePop() is called from 1 sites in this file.
    It appears to be inlineable (size = 41 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	queue_lock_acquire() (1 times)
	tomp_logError() (1 times)
	queue_lock_release() (1 times)

There are 11 memory accesses with 17 dependences.


==============================================================================

extern void tomp_sendExitEvents() is called from 2 sites in this file.
    It appears to be inlineable (size = 30 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	tomp_eventAlloc() (1 times)
	tomp_eventPush() (1 times)

There are 13 memory accesses with 35 dependences.


==============================================================================

extern int tomp_initParallel() is called from 0 sites in this file.
    It appears to be inlineable (size = 117 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_eventAllocChecked() (3 times)
	tomp_event_pointer() (3 times)

There are 23 memory accesses with 24 dependences.


==============================================================================

extern int tomp_initLocal() is called from 0 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_clear_TeamState() (1 times)

There are -1 memory accesses with 0 dependences.


==============================================================================

extern void tomp_initIcv() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 6 memory accesses with 1 dependences.


==============================================================================

extern void tomp_initIcvNoParse() is called from 0 sites in this file.
    It appears to be inlineable (size = 19 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_initIcv() (1 times)

There are -1 memory accesses with 0 dependences.


==============================================================================

extern void tomp_exitProcessing() is called from 2 sites in this file.
    It appears to be inlineable (size = 16 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_eventFree() (1 times)

There are 13 memory accesses with 20 dependences.


==============================================================================

extern void tomp_exitLocalX() is called from 0 sites in this file.
    It appears to be inlineable (size = 5 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_exitProcessing() (1 times)

There are -1 memory accesses with 0 dependences.


==============================================================================

extern void __TI_omp_terminate() is called from 0 sites in this file.
    It appears to be inlineable (size = 62 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	tomp_sendExitEvents() (1 times)
	tomp_exitProcessing() (1 times)
	tomp_eventFree() (3 times)

There are 38 memory accesses with 174 dependences.


== END OF INFO OUTPUT==
