Revised: 2000-Dec-05.
Again:   2002-Jul-06
Again:   2005-Sep-19

    NOTE:

    The USB subsystem now has a substantial section in "The Linux Kernel API"
    guide (in Documentation/DocBook), generated from the current source
    code.  This particular documentation file isn't particularly current or
    complete; don't rely on it except for a quick overview.
USB 서브시스템은 이제 상당한 섹션을 가지게 되었다. 현재 소스 코드로부터 생성된 "리눅스 커널 API"안에서
이 특정한 문서파일은 완성되지 않았다. 퀵 오버뷰를 제외하고 이것을 의지하지 마라


1.1. Basic concept or 'What is an URB?'
기본 컨셉 혹은 'URB란 무엇인가?'

The basic idea of the new driver is message passing, the message itself is 
called USB Request Block, or URB for short.
새 드라이버의 기본 아이디어는 메세지 패싱(메세지 전달), 
메세지 자체가 짧은 시간동안 USB 요청 블록이나 URB를 호출한다. 

- An URB consists of all relevant information to execute any USB transaction 
  and deliver the data and status back.
URB는 어느 USB 상호교류를 실행하고 데이터와 상태를 전달하기 위해 연관된 모든 정보로 구성된다.

- Execution of an URB is inherently an asynchronous operation, i.e. the 
  usb_submit_urb(urb) call returns immediately after it has successfully
  queued the requested action.
URB의 실행은 원래 비동기적 실행이다. urb 콜은 그것이 요청된 작업을 성공적으로 큐에 넣은 후 즉시 되돌아온다.

- Transfers for one URB can be canceled with usb_unlink_urb(urb) at any time.
하나의 URB의 전송은 어떤 시간에서든 urb로 취소될 수 있다. 

- Each URB has a completion handler, which is called after the action
  has been successfully completed or canceled. The URB also contains a
  context-pointer for passing information to the completion handler.
각 URB 완료 핸들러를 가진다. 그 핸들러는 작업이 성공적으로 완료되거나 취소된 후에 요청된다.
URB는 정보를 완료 핸들러에 전달하기 위해 내용-포인터도 포함한다.

- Each endpoint for a device logically supports a queue of requests.
  You can fill that queue, so that the USB hardware can still transfer
  data to an endpoint while your driver handles completion of another.
  This maximizes use of USB bandwidth, and supports seamless streaming
  of data to (or from) devices when using periodic transfer modes.
각 디바이스의 마침포인트는 논리적으로 요청들의 큐를 지원한다.
너의 드라이버가 다른 완료를 처리하는 동안 USB 하드웨어가 데이터를 마침포인터로 전송할 수 있게 하기 위해서 너는 그 큐를 채울 수 있다.
이것은 주기적인 옮기기 모드들을 사용할 때, USB 대역폭 사용을 최대화한다.
그리고 디바이스로나 디바이스로부터 데이터의 원활한 스트리밍을 지원한다.


1.2. The URB structure
URB의 구조

Some of the fields in an URB are:
URB안에 있는 몇가지 필드들

struct urb
{
// (IN) device and pipe specify the endpoint queue
// (입력) 디바이스와 파이프는 마침포인트의 큐를 지정한다.
	struct usb_device *dev;         // pointer to associated USB device
					// 관련된 USB 장치를 가리키는 포인터
	unsigned int pipe;              // endpoint information
					// 마침포인터 정보

	unsigned int transfer_flags;    // ISO_ASAP, SHORT_NOT_OK, etc.
					// ?

// (IN) all urbs need completion routines
// (입력) 모든 urb는 완료 과정이 필요하다.
	void *context;                  // context for completion routine
					// 완료 과정을 위한 내용
	void (*complete)(struct urb *); // pointer to completion routine
					// 완료 과정을 가리키는 포인터

// (OUT) status after each completion
// (출력) 각 완료 후의 상태
	int status;                     // returned status
					// 복귀한 상태

// (IN) buffer used for data transfers
// (입력) 데이더 전송을 위해 사용되는 버퍼
	void *transfer_buffer;          // associated data buffer
					// 관련된 데이터 버퍼
	int transfer_buffer_length;     // data buffer length
					// 데이터 버퍼 길이
	int number_of_packets;          // size of iso_frame_desc
					// iso_frame_desc의 크기

// (OUT) sometimes only part of CTRL/BULK/INTR transfer_buffer is used
// (출력) 때때로 오직 CTRL/BULK/INTR 전송_버퍼의 부분이 사용된다.
	int actual_length;              // actual data buffer length
					// 실제 데이터 버퍼 길이

// (IN) setup stage for CTRL (pass a struct usb_ctrlrequest)
// (입력) CTRL을 위한 준비 단계 (구조체 usb_ctrlrequest를 보냄)
	unsigned char* setup_packet;    // setup packet (control only)
					// 준비 패킷 (오직 컨트롤만)

// Only for PERIODIC transfers (ISO, INTERRUPT)
// 오직 주기적인 전송을 위해 (ISO, 인터럽트)
    // (IN/OUT) start_frame is set unless ISO_ASAP isn't set
    // (입/출력) 시작 프레임은 ISO_ASAP가 준비되지 않았다면 준비된다. 
	int start_frame;                // start frame
					// 시작 프레임
	int interval;                   // polling interval
					// 폴링 간격 (폴링: 송신요구의 유무를 문의하는 과정)
    // ISO only: packets are only "best effort"; each can have errors
    // ISO 전용: 패킷은 오직 "가장 좋은 성능"으로 한다; 각각이 에러를 가질 수 있다.
	int error_count;                // number of errors
					// 에러의 개수
	struct usb_iso_packet_descriptor iso_frame_desc[0];
};

Your driver must create the "pipe" value using values from the appropriate
endpoint descriptor in an interface that it's claimed.
너의 드라이버는 반드시 할당된 인터페이스 안에 있는 알맞은 마침포인트 디스크립터의 값을 사용하여
"파이프" 값을 생성해야 한다.


1.3. How to get an URB?
어떻게 URB를 얻을 수 있는가?

URBs are allocated with the following call
URB는 다음에 나오는 콜로 할당된다. 

	struct urb *usb_alloc_urb(int isoframes, int mem_flags)

Return value is a pointer to the allocated URB, 0 if allocation failed.
The parameter isoframes specifies the number of isochronous transfer frames
you want to schedule. For CTRL/BULK/INT, use 0.  The mem_flags parameter
holds standard memory allocation flags, letting you control (among other
things) whether the underlying code may block or not.
리턴값은 할당된 URB를 가리키는 포인터이다. 만약 할당을 실패한다면 0이 리턴된다.
isoframe 매개변수는 니가 스케쥴하기 원하는 등시 전송 프레임의 수를 지정한다.
CTRL/BULK/INT를 위해서는 0을 사용한다.(매개변수를 0으로 한다는 뜻인 것 같다.)



To free an URB, use

	void usb_free_urb(struct urb *urb)

You may free an urb that you've submitted, but which hasn't yet been
returned to you in a completion callback.  It will automatically be
deallocated when it is no longer in use.


1.4. What has to be filled in?

Depending on the type of transaction, there are some inline functions 
defined in <linux/usb.h> to simplify the initialization, such as
fill_control_urb() and fill_bulk_urb().  In general, they need the usb
device pointer, the pipe (usual format from usb.h), the transfer buffer,
the desired transfer length, the completion  handler, and its context. 
Take a look at the some existing drivers to see how they're used.

Flags:
For ISO there are two startup behaviors: Specified start_frame or ASAP.
For ASAP set URB_ISO_ASAP in transfer_flags.

If short packets should NOT be tolerated, set URB_SHORT_NOT_OK in 
transfer_flags.


1.5. How to submit an URB?

Just call

	int usb_submit_urb(struct urb *urb, int mem_flags)

The mem_flags parameter, such as SLAB_ATOMIC, controls memory allocation,
such as whether the lower levels may block when memory is tight.

It immediately returns, either with status 0 (request queued) or some
error code, usually caused by the following:

- Out of memory (-ENOMEM)
- Unplugged device (-ENODEV)
- Stalled endpoint (-EPIPE)
- Too many queued ISO transfers (-EAGAIN)
- Too many requested ISO frames (-EFBIG)
- Invalid INT interval (-EINVAL)
- More than one packet for INT (-EINVAL)

After submission, urb->status is -EINPROGRESS; however, you should never
look at that value except in your completion callback.

For isochronous endpoints, your completion handlers should (re)submit
URBs to the same endpoint with the ISO_ASAP flag, using multi-buffering,
to get seamless ISO streaming.


1.6. How to cancel an already running URB?

There are two ways to cancel an URB you've submitted but which hasn't
been returned to your driver yet.  For an asynchronous cancel, call

	int usb_unlink_urb(struct urb *urb)

It removes the urb from the internal list and frees all allocated
HW descriptors. The status is changed to reflect unlinking.  Note
that the URB will not normally have finished when usb_unlink_urb()
returns; you must still wait for the completion handler to be called.

To cancel an URB synchronously, call

	void usb_kill_urb(struct urb *urb)

It does everything usb_unlink_urb does, and in addition it waits
until after the URB has been returned and the completion handler
has finished.  It also marks the URB as temporarily unusable, so
that if the completion handler or anyone else tries to resubmit it
they will get a -EPERM error.  Thus you can be sure that when
usb_kill_urb() returns, the URB is totally idle.

There is a lifetime issue to consider.  An URB may complete at any
time, and the completion handler may free the URB.  If this happens
while usb_unlink_urb or usb_kill_urb is running, it will cause a
memory-access violation.  The driver is responsible for avoiding this,
which often means some sort of lock will be needed to prevent the URB
from being deallocated while it is still in use.

On the other hand, since usb_unlink_urb may end up calling the
completion handler, the handler must not take any lock that is held
when usb_unlink_urb is invoked.  The general solution to this problem
is to increment the URB's reference count while holding the lock, then
drop the lock and call usb_unlink_urb or usb_kill_urb, and then
decrement the URB's reference count.  You increment the reference
count by calling

	struct urb *usb_get_urb(struct urb *urb)

(ignore the return value; it is the same as the argument) and
decrement the reference count by calling usb_free_urb.  Of course,
none of this is necessary if there's no danger of the URB being freed
by the completion handler.


1.7. What about the completion handler?

The handler is of the following type:

	typedef void (*usb_complete_t)(struct urb *)

I.e., it gets the URB that caused the completion call. In the completion
handler, you should have a look at urb->status to detect any USB errors.
Since the context parameter is included in the URB, you can pass
information to the completion handler.

Note that even when an error (or unlink) is reported, data may have been
transferred.  That's because USB transfers are packetized; it might take
sixteen packets to transfer your 1KByte buffer, and ten of them might
have transferred successfully before the completion was called.


NOTE:  ***** WARNING *****
NEVER SLEEP IN A COMPLETION HANDLER.  These are often called in atomic
context.

In the current kernel, completion handlers run with local interrupts
disabled, but in the future this will be changed, so don't assume that
local IRQs are always disabled inside completion handlers.

1.8. How to do isochronous (ISO) transfers?

For ISO transfers you have to fill a usb_iso_packet_descriptor structure,
allocated at the end of the URB by usb_alloc_urb(n,mem_flags), for each
packet you want to schedule.   You also have to set urb->interval to say
how often to make transfers; it's often one per frame (which is once
every microframe for highspeed devices).  The actual interval used will
be a power of two that's no bigger than what you specify.

The usb_submit_urb() call modifies urb->interval to the implemented interval
value that is less than or equal to the requested interval value.  If
ISO_ASAP scheduling is used, urb->start_frame is also updated.

For each entry you have to specify the data offset for this frame (base is
transfer_buffer), and the length you want to write/expect to read.
After completion, actual_length contains the actual transferred length and 
status contains the resulting status for the ISO transfer for this frame.
It is allowed to specify a varying length from frame to frame (e.g. for
audio synchronisation/adaptive transfer rates). You can also use the length 
0 to omit one or more frames (striping).

For scheduling you can choose your own start frame or ISO_ASAP. As explained
earlier, if you always keep at least one URB queued and your completion
keeps (re)submitting a later URB, you'll get smooth ISO streaming (if usb
bandwidth utilization allows).

If you specify your own start frame, make sure it's several frames in advance
of the current frame.  You might want this model if you're synchronizing
ISO data with some other event stream.


1.9. How to start interrupt (INT) transfers?

Interrupt transfers, like isochronous transfers, are periodic, and happen
in intervals that are powers of two (1, 2, 4 etc) units.  Units are frames
for full and low speed devices, and microframes for high speed ones.
The usb_submit_urb() call modifies urb->interval to the implemented interval
value that is less than or equal to the requested interval value.

In Linux 2.6, unlike earlier versions, interrupt URBs are not automagically
restarted when they complete.  They end when the completion handler is
called, just like other URBs.  If you want an interrupt URB to be restarted,
your completion handler must resubmit it.
