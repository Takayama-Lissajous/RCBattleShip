Linux USB Video Class (UVC) driver
==================================
리눅스 USB Video Class (UVC) 드라이버

This file documents some driver-specific aspects of the UVC driver, such as
driver-specific ioctls and implementation notes.
이 파일은 드리이버-지정 ioctls와 구현 노트와 같은 UVC 드라이버의 드라이버-지정 측면을 문서화한다.


Questions and remarks can be sent to the Linux UVC development mailing list at
linux-uvc-devel@lists.berlios.de.


Extension Unit (XU) support
---------------------------
Extension Unit (XU) 확장 단위(XU) 지원


1. Introduction
1. 소개

The UVC specification allows for vendor-specific extensions through extension
units (XUs). The Linux UVC driver supports extension unit controls (XU controls)
through two separate mechanisms:

UVC specification(규격)은 확장 단위(XU)을 통해서 벤더 특정 확장을 허용한다. 

리눅스 UVC 드라이버는 두 개 별도의 메카니즘을 통해서 확장 단위 제어 (XU controls)를 지원 :

  - through mappings of XU controls to V4L2 controls
XU 제어를 V4L2 제어로 매핑하는 것을 통해서
  - through a driver-specific ioctl interface
드라이버-특정 ioctl 인터페이스를 통해서

The first one allows generic V4L2 applications to use XU controls by mapping
certain XU controls onto V4L2 controls, which then show up during ordinary
control enumeration.
첫번째는 어떤 XU 제어를 V4L2 제어로 매핑하여 일반적 V4L2 애플리케이션이 XU 제어 사용할 수 있도록 허용하는데,
그리고 나서 정상적 제어 enumeration(계산)하는 동안 나타난다.


The second mechanism requires uvcvideo-specific knowledge for the application to
access XU controls but exposes the entire UVC XU concept to user space for
maximum flexibility.
두번째 매카니즘은 애플리케이션이 XU 제어에 접근하기 위해서 uvcvideo-특정 지식을 요구하지만
최대 유연성을 위해서 전체 UVC XU 개념을 user space 사용자 공간으로 노출시킨다.


Both mechanisms complement each other and are described in more detail below.
양쪽 매카니즘 모두 상호보완 하며 더 자세한 것은 아래와 같이 기술함.


2. Control mappings
2. 제어 매핑

The UVC driver provides an API for user space applications to define so-called
control mappings at runtime. These allow for individual XU controls or byte
ranges thereof to be mapped to new V4L2 controls. Such controls appear and
function exactly like normal V4L2 controls (i.e. the stock controls, such as
brightness, contrast, etc.). However, reading or writing of such a V4L2 controls
triggers a read or write of the associated XU control.
UVC 드라이버는 사용자 공간 애플리케이션이 런타임시에 소위 제어 매핑을 정의하기 위해
API를 공급한다. 이것들은 개별적 XU 제어 또는 그것의 바이트 범위를 새로운 V4L2 제어에 매핑되도록 허용한다.
그런 제어가 나타나서 정상적 V4L2 제어(에를 들면, 밝기, 대비 등과 같은 stock control)와 같이 정확히 기능한다.
그러나, 그런 V4L2 제어를 읽고 쓰는 것은 관련된 XU 제어를 읽고 쓰는 것을 유발한다.


The ioctl used to create these control mappings is called UVCIOC_CTRL_MAP.
Previous driver versions (before 0.2.0) required another ioctl to be used
beforehand (UVCIOC_CTRL_ADD) to pass XU control information to the UVC driver.
This is no longer necessary as newer uvcvideo versions query the information
directly from the device.
이런 제어 매핑 생성에 사용되는 ioctl은 UVCIOC_CTRL_MAP이라고 불린다.
이전의 드라이버 버전(0.2.0 이전)은 XU 제어 정보를 UVC 드라이버에 미리(UVCIOC_CTRL_ADD) 전달하기 위해서
다른 ioctl이 사용될 것을 요구했다. 
이것은 새로운 uvcvideo 버전들이 디바이스로부터 직접 정보를 조회함으로써 더 이상 필요 없어진다.


For details on the UVCIOC_CTRL_MAP ioctl please refer to the section titled
"IOCTL reference" below.
UVCIOC_CTRL_MAP ioctl에 관한 자세한 것은 아래에 "IOCTL reference" 제목의 섹션을 참조하라.


3. Driver specific XU control interface
드라이버 지정 XU 확장 단위 제어 인터페이스

For applications that need to access XU controls directly, e.g. for testing
purposes, firmware upload, or accessing binary controls, a second mechanism to
access XU controls is provided in the form of a driver-specific ioctl, namely
UVCIOC_CTRL_QUERY.
확장 단위 제어에 직접 접근할 필요가 있는 애프리케이션을 위해서, 예를 들면 시험 용도, 펌웨어 업로드, 또는 바이너리 콘트롤 접근을 위해서,
확장 단위 제어에 접근하는 두 번째 매카니즘이, 드라이버-지정 ioctl, 이름하여 UVCIOC_CTRL_QUERY의 형태 속에 제공된다.


A call to this ioctl allows applications to send queries to the UVC driver that
directly map to the low-level UVC control requests.
이 ioctl로 호출이 애플리케이션이 low-level UVC 제어 요청에 직접 매핑하는 UVC 드라이버에 쿼리를 보내도록 허용한다.


In order to make such a request the UVC unit ID of the control's extension unit
and the control selector need to be known. This information either needs to be
hardcoded in the application or queried using other ways such as by parsing the
UVC descriptor or, if available, using the media controller API to enumerate a
device's entities.
그런 요청을 만들기 위해서 그 제어의 확장 단위의 UVC unit ID와 제어 셀렉터가 알려질 필요가 있다.
이 정보는 애플리케이션 안에 하드코딩되거나 UVC 설명자 파싱 parsing과 같은 다른 방식을 사용하거나, 가능하다면,
디바이스 엔티티들을 열거하기 위해 미디어 제어 API를 사용하여 쿼리될 필요가 있다.

Unless the control size is already known it is necessary to first make a
UVC_GET_LEN requests in order to be able to allocate a sufficiently large buffer
and set the buffer size to the correct value. Similarly, to find out whether
UVC_GET_CUR or UVC_SET_CUR are valid requests for a given control, a
UVC_GET_INFO request should be made. The bits 0 (GET supported) and 1 (SET
supported) of the resulting byte indicate which requests are valid.
제어 크기가 이미 알려지지않는다면 충분히 큰 버퍼 할당할 수 있도록 UVC_GET_LEN 요청을 먼저 만들고 버퍼 크기를 정확한 값으로 설정할 필요가 있다.
비슷하게, UVC_GET_CUR 또는 UVC_SET_CUR이 주어진 제어를 위해서 유효한 요청인지 아닌지를 파악하기 위해서, UVC_GET_INFO 요청이 만들어져야 한다.
결과 바이트의 0 (GET 지원됨)과 1 (SET 지원됨) 비트는 어떤 요청이 유효한지를 가리킨다.


With the addition of the UVCIOC_CTRL_QUERY ioctl the UVCIOC_CTRL_GET and
UVCIOC_CTRL_SET ioctls have become obsolete since their functionality is a
subset of the former ioctl. For the time being they are still supported but
application developers are encouraged to use UVCIOC_CTRL_QUERY instead.
UVCIOC_CTRL_QUERY ioctl의 추가로, UVCIOC_CTRL_GET와 UVCIOC_CTRL_SET ioctls들은 그 기능이 이전의 ioctl의 서브세트가 된 이후에 쓸데없는 것이 되었다.


For details on the UVCIOC_CTRL_QUERY ioctl please refer to the section titled
"IOCTL reference" below.
UVCIOC_CTRL_QUERY ioct에 관한 상세한 것은 아래에 "IOCTL reference" 제목의 섹션을 참조하라.




4. Security

The API doesn't currently provide a fine-grained access control facility. The
UVCIOC_CTRL_ADD and UVCIOC_CTRL_MAP ioctls require super user permissions.
API는 현재 세밀한 접근 제어 기능을 제공하지 않는다. 
UVCIOC_CTRL_ADD와 UVCIOC_CTRL_MAP ioctls는 수퍼 사용자 권한이 필요하다. 

Suggestions on how to improve this are welcome.


5. Debugging

In order to debug problems related to XU controls or controls in general it is
recommended to enable the UVC_TRACE_CONTROL bit in the module parameter 'trace'.
This causes extra output to be written into the system log.
확장 단위 제어 또는 일반적인 제어 관련한 문제를 디버그 하기 위해서는 'trace' 모듈 파라미터에 UVC_TRACE_CONTROL bit 활성화가 추천된다.
이것은 시스템 로그에 추가적인 출력이 써지도록 한다.


6. IOCTL reference

---- UVCIOC_CTRL_MAP - Map a UVC control to a V4L2 control ----

Argument: struct uvc_xu_control_mapping

Description:
	This ioctl creates a mapping between a UVC control or part of a UVC
	control and a V4L2 control. Once mappings are defined, userspace
	applications can access vendor-defined UVC control through the V4L2
	control API.
이 ioctl은 UVC 제어 또는 UVC 제어의 일부와 V4L2 제어 사이에 매핑을 생성한다.
일단 매핑이 정의되면, 사용자 공간 애플리케이션은 V4L2 제어 API를 통해서 벤더-지정 UVC 제어에 접근할 수 있다.

	To create a mapping, applications fill the uvc_xu_control_mapping
	structure with information about an existing UVC control defined with
	UVCIOC_CTRL_ADD and a new V4L2 control.
매핑 생성을 위해서, 애플리케이션은 UVCIOC_CTRL_ADD로 정의된 기존 UVC 제어와 새로운 V4L2 제어에 관한 정보로 
uvc_xu_control_mapping 구조를 채운다. 

	A UVC control can be mapped to several V4L2 controls. For instance,
	a UVC pan/tilt control could be mapped to separate pan and tilt V4L2
	controls. The UVC control is divided into non overlapping fields using
	the 'size' and 'offset' fields and are then independently mapped to
	V4L2 control.
UVC 제어는 몇 개의 V4L2 제어에 매핑될 수 있다. 예를 들면, UVC pan/tilt 제어는 별개의 pan과 tilt V4L2 제어에 매핑될 수 있다.
UVC 제어는 'size'와 "offset' 필드를 사용하여 겹치지 않는 필드로 나눌 수 있으며 그리고 나서 독립적으로 V4L2 제어에 매핑될 수 있다.

	For signed integer V4L2 controls the data_type field should be set to
	UVC_CTRL_DATA_TYPE_SIGNED. Other values are currently ignored.
부호있는 정수 signed integer V4L2 제어를 위해서 data_type 필드는 UVC_CTRL_DATA_TYPE_SIGNED로 설정되어야 한다.
다른 값들은 현재 무시된다.

Return value:
	On success 0 is returned. On error -1 is returned and errno is set
	appropriately.
성공시 0가 리턴된다. 에러시 -1이 리턴되고 errno가 적절하게 설정된다.

	ENOMEM
		Not enough memory to perform the operation.
동작 수행을 위한 메모리 불충분
	EPERM
		Insufficient privileges (super user privileges are required).
불충분한 권한(수퍼 사용자 권한 필요)
	EINVAL
		No such UVC control.
그런 UVC 제어 없음.
	EOVERFLOW
		The requested offset and size would overflow the UVC control.
요청된 offset과 size가 UVC 제어 오버 플로우.
	EEXIST
		Mapping already exists.
매핑이 이미 존재함.

Data types:
	* struct uvc_xu_control_mapping

	__u32	id		V4L2 control identifier
	__u8	name[32]	V4L2 control name
	__u8	entity[16]	UVC extension unit GUID
	__u8	selector	UVC control selector
	__u8	size		V4L2 control size (in bits)
	__u8	offset		V4L2 control offset (in bits)
	enum v4l2_ctrl_type
		v4l2_type	V4L2 control type
	enum uvc_control_data_type
		data_type	UVC control data type
	struct uvc_menu_info
		*menu_info	Array of menu entries (for menu controls only)
	__u32	menu_count	Number of menu entries (for menu controls only)

	* struct uvc_menu_info

	__u32	value		Menu entry value used by the device
	__u8	name[32]	Menu entry name


	* enum uvc_control_data_type

	UVC_CTRL_DATA_TYPE_RAW		Raw control (byte array)
	UVC_CTRL_DATA_TYPE_SIGNED	Signed integer
	UVC_CTRL_DATA_TYPE_UNSIGNED	Unsigned integer
	UVC_CTRL_DATA_TYPE_BOOLEAN	Boolean
	UVC_CTRL_DATA_TYPE_ENUM		Enumeration
	UVC_CTRL_DATA_TYPE_BITMASK	Bitmask


---- UVCIOC_CTRL_QUERY - Query a UVC XU control ----

Argument: struct uvc_xu_control_query

Description:
	This ioctl queries a UVC XU control identified by its extension unit ID
	and control selector.
이 ioctl은 확장 단위 ID와 제어 셀렉터에 의해 식별된 UVC 확장 단위 제어를 쿼리한다.

	There are a number of different queries available that closely
	correspond to the low-level control requests described in the UVC
	specification. These requests are:
UVC 규격에 설명된 하위 레벨 제어 요청에 밀접하게 해당하는 수많은 다른 쿼리가 사용가능하다.
이런 요청들은 아래와 같다.

	UVC_GET_CUR
		Obtain the current value of the control.
	UVC_GET_MIN
		Obtain the minimum value of the control.
	UVC_GET_MAX
		Obtain the maximum value of the control.
	UVC_GET_DEF
		Obtain the default value of the control.
	UVC_GET_RES
		Query the resolution of the control, i.e. the step size of the
		allowed control values.
	UVC_GET_LEN
		Query the size of the control in bytes.
	UVC_GET_INFO
		Query the control information bitmap, which indicates whether
		get/set requests are supported.
	UVC_SET_CUR
		Update the value of the control.

	Applications must set the 'size' field to the correct length for the
	control. Exceptions are the UVC_GET_LEN and UVC_GET_INFO queries, for
	which the size must be set to 2 and 1, respectively. The 'data' field
	must point to a valid writable buffer big enough to hold the indicated
	number of data bytes.
애플리케이션들은 제어를 위해서 'size' 필드에 정확한 길이를 설정해야 한다.
예외는, 2와 1을 크기로 각각 설정해야 하는 UVC_GET_LEN와 UVC_GET_INFO 쿼리이다.
'data' 필드는 데이타 바이트의 가리키는 숫자를 유지하기 위해 충분히 큰 유효한 쓰기 가능한 버퍼를 포인트해야 한다.

	Data is copied directly from the device without any driver-side
	processing. Applications are responsible for data buffer formatting,
	including little-endian/big-endian conversion. This is particularly
	important for the result of the UVC_GET_LEN requests, which is always
	returned as a little-endian 16-bit integer by the device.
데이타는 driver-side 프로세싱 없이 디바이스로부터 직접 복사된다. 
애플리케이션은 little-endian/big-endian(작은/큰 단위가 앞에 나오는) 변환을 포함하여, 데이터 버퍼 포맷팅에 책임을 진다.
이것은 UVC_GET_LEN 요청의 결과를 위해 특히 중요한데, 이 요청은 항상 디바이스에 의해 little-endian 16-bit integer로 리턴된다.

Return value:
	On success 0 is returned. On error -1 is returned and errno is set
	appropriately.

	ENOENT
		The device does not support the given control or the specified
		extension unit could not be found.
	ENOBUFS
		The specified buffer size is incorrect (too big or too small).
	EINVAL
		An invalid request code was passed.
	EBADRQC
		The given request is not supported by the given control.
	EFAULT
		The data pointer references an inaccessible memory area.

Data types:
	* struct uvc_xu_control_query

	__u8	unit		Extension unit ID
	__u8	selector	Control selector
	__u8	query		Request code to send to the device
	__u16	size		Control data size (in bytes)
	__u8	*data		Control value